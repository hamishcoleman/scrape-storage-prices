#!/usr/bin/env perl
use warnings;
use strict;
#
# Grab the hard drives data from CPL
#

# allow the libs to be in the bin dir
use FindBin;
use lib "$FindBin::RealBin/lib";
use lib "/home/hamish/s/bin/lib";

use HTML::TreeBuilder;
use IO::HTML;

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

sub file2tree {
    my $file = shift;

    my $fh = html_file($file);
    return undef if (!$fh);

    my $tree = HTML::TreeBuilder->new;
    $tree->parse_file($fh);
    $tree->eof;
    $tree->elementify;

    return $tree;
}

sub default {
    my $data = shift;
    my $key = shift;
    my $val = shift;

    if (!defined($data->{$key})) {
        $data->{$key} = $val;
    }
}

sub normalise1product {
    my $data = shift;

    # Normalise the price field
    $data->{price} =~ s/^\$//;
    $data->{price} =~ s/,//;

    my $t = $data->{comment};

    my $table = {
        # rpm
        ' SSD( |,|$)'   => { rpm => 'SSD' },

        # form factor
        ' 2.5" '        => { form => '2.5"' },
        ' 3.5" '        => { form => '3.5"' },
        " 2.5'' "       => { form => '2.5"' },
        " 3.5' "        => { form => '3.5"' },
        ' 3.5 '         => { form => '3.5"' },
        ' 2.5in( |$)'   => { form => '2.5"' },
        ' 3.5in '       => { form => '3.5"' },
        ' 2.5 Inch '    => { form => '2.5"' },
        ' 2.5-Inch '    => { form => '2.5"' },
        ' M.2 '         => { form => 'M.2' },
        ' M2( |$)'      => { form => 'M.2' },
        ' mSATA'        => { form => 'mSATA', interface => 'SATA' },

        # interface
        ' nvme '        => { interface => 'NVME' },
        ' pcie( |$)'    => { interface => 'NVME' },
        ' SAS( |$)'     => { interface => 'SAS' },
        ' SATA( |,|$)'  => { interface => 'SATA' },
        ' SATA3( |$)'   => { interface => 'SATA' },
        ' SATAIII '     => { interface => 'SATA' },

        # brand
        'seagate '      => { brand => 'Seagate' },
        'toshiba '      => { brand => 'Toshiba' },
        'samsung '      => { brand => 'Samsung' },
        'crucial '      => { brand => 'Crucial' },
        'sandisk '      => { brand => 'SanDisk' },
        'hitachi '      => { brand => 'Hitachi' },
        'kingston '     => { brand => 'Kingston' },
        'micron '       => { brand => 'Micron' },
        'qnap '         => { brand => 'Qnap' },
        'intel '        => { brand => 'Intel' },
        'adata '        => { brand => 'Adata' },
        'gigabyte '     => { brand => 'Gigabyte' },
        'team '         => { brand => 'Team' },
        'hp '           => { brand => 'HP' },
        'wd '           => { brand => 'WD' },
    };

    my $errors = 0;

    while (my ($re,$entry) = each(%{$table})) {
        if ($t =~ m/$re/i) {
            while (my ($k,$v) = each(%{$entry})) {
                if (defined($data->{$k})) {
                    warn("WARN: Duplicate key match");
                    print(" re: $re\n");
                    print(" key: $k\n");
                    print(" data: ",Dumper($data));
                    $errors++;
                } else {
                    $data->{$k} = $v;
                }
            }
        }
    }

    if ($t =~ m/ (\d+)rpm/i) {
        $data->{rpm} = $1;
    } elsif ($t =~ m/ ([0-9][0-9.]+)k/i) {
        $data->{rpm} = $1 * 1000;
    }

    if ($t =~ m/ (\d+)tb( |,|$)/i) {
        $data->{gig} = $1 * 1000;
    } elsif ($t =~ m/ (\d+)gb( |,|$)/i) {
        $data->{gig} = $1;
    } elsif ($t =~ m/ (\d+) gb /i) {
        $data->{gig} = $1;
    } elsif ($t =~ m/ (\d+) tb /i) {
        $data->{gig} = $1 * 1000;
    } elsif ($t =~ m/ ([0-9][0-9.]+)tb /i) {
        $data->{gig} = $1 * 1000;
    }

    # TODO - ensure price starts with a dollarsign
    $data->{date} = 'FIXME';
    $data->{supplier} = 'CPL';

    if ($data->{price} && $data->{gig}) {
        $data->{sgig} = $data->{price} / $data->{gig};
    }

    # Set some default values
    default($data,'brand','?');
    default($data,'form','?');
    default($data,'gig','?');
    default($data,'interface','?');
    default($data,'rpm','?');
    default($data,'sgig','?');

    # commas annoy my dodgy not-quite-csv
    $data->{comment} =~ s/,/_/g;

    if ($errors) {
        die("Errors during normalisation");
    }
    return $data;
}

sub normaliseproducts {
    my @products;
    while (my $prod = shift) {
        push @products, normalise1product($prod);
    }
    return @products;
}

sub scrape1product {
    my $node = shift;
    my $data = {};

    my $url = $node->look_down('_tag', 'a');
    if (!$url) {
        die("Could not find product image and url");
        return undef;
    }

    $data->{comment} = $url->attr('title');
    $data->{url} = $url->attr('href');
    
    my $price = $node->look_down('_tag', 'span', 'class', 'price');
    if (!$price) {
        die("Could not find price");
        return undef;
    }

    $data->{price} = $price->as_trimmed_text();

    return $data;
}

sub scrape2products {
    my $tree = shift;

    my $products = $tree->look_down(
        '_tag', 'div',
        'class', 'category-products',
    );
    if (!$products) {
        die("Could not find products");
        return undef;
    }

    my @products;
    for my $node ($products->look_down(
            '_tag', 'li',
            'class', qr/item/,
        )) {
        push @products, scrape1product($node);
    }

    return @products;
}

sub main {
    if (scalar(@ARGV) <2) {
        print("Usage: $0 outfile infile...\n");
        exit(1);
    }
    my $outfilename = shift @ARGV;

    my @products;
    for my $file (@ARGV) {
        my $tree = file2tree($file);
        push @products, scrape2products($tree);
    }

    @products = normaliseproducts(@products);

    my @fields = qw(date price form interface rpm gig sgig brand supplier comment);

    my $outfile;
    if ($outfilename eq '-') {
        $outfile = *STDOUT;
    } else {
        open($outfile, '>', $outfilename);
    }

    $outfile->print(join(',', @fields), "\n");

    for my $prod (@products) {
        $outfile->print(join(',', map({$prod->{$_}} @fields)), "\n");
    }

    #print Dumper(@products);
}

main();
