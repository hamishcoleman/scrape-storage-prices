#!/usr/bin/env perl
use warnings;
use strict;
#
# Given an old database (with dates) and one or more new databases, merge them
#
# If the price,supplier,comment is unique, then we just store it
# If it is not unique then we keep the newest extracted fields and the oldest date
#
# This should give a database that shows the hdd price over time

# allow the libs to be in the bin dir
use FindBin;
use lib "$FindBin::RealBin/lib";
use lib "/home/hamish/s/bin/lib";

use POSIX qw(strftime);
use Text::CSV;

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

sub read_merged {
    my $fd = shift;

    # Dont use Text::CSV until the old merged file has been correctly turned
    # into CSV

    # read the header
    <$fd>;

    my $db = {};
    while(<$fd>) {
        chomp;
        my @f = split(/,/);

        # If there is no comment, we cannot process the line
        next if (!defined($f[9]));

        # Key is comment,supplier,price
        my $key = join(',', $f[9], $f[8], $f[1]);
        @{$db->{$key}} = @f;
    }
    return $db;
}

sub write_merged {
    my $db = shift;
    my $fd = shift;

    my $csv = Text::CSV->new();

    my @fields = qw(date price form interface speed gig sgig brand supplier comment);
    $csv->print($fd, \@fields);
    $fd->print("\n");

    for my $row (sort(keys(%{$db}))) {

        $csv->print($fd, $db->{$row});
        $fd->print("\n");
    }
}

sub read_export_and_merge {
    my $db = shift;
    my $timestamp = shift;
    my $fd = shift;

    my $date = strftime("%Y-%m-%d", gmtime($timestamp));
    my $csv = Text::CSV->new();

    # read the header
    my $fields = $csv->getline($fd);

    while(my $f = $csv->getline($fd)) {
        unshift @{$f}, $date;
        # Key is comment,supplier,price
        my $key = join(',', $f->[9], $f->[8], $f->[1]);

        if (defined($db->{$key})) {
            # Keep the old date, but update any other changes
            $f->[0] = $db->{$key}[0];
        }

        $db->{$key} = $f;
    }
}

sub main {
    if (scalar(@ARGV) <3) {
        print("Usage: $0 outputdb inputdb infile...\n");
        exit(1);
    }
    my $merged_new = shift @ARGV;
    my $merged_old = shift @ARGV;

    my $db;
    my $infile;
    if (open($infile, "<:encoding(utf8)", $merged_old)) {
        $db = read_merged($infile);
        close($infile);
    } else {
        # file doesnt exist yet
        $db = {};
    }

    for my $file (@ARGV) {
        my $mtime = (stat($file))[9];
        open($infile, "<:encoding(utf8)", $file);
        read_export_and_merge($db, $mtime, $infile);
    }

    my $outfile;
    open($outfile, '>:encoding(utf8)', $merged_new);

    write_merged($db, $outfile);
}

main();
