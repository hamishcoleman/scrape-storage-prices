#!/usr/bin/env perl
use warnings;
use strict;
#
# Grab the hard drives data from CPL
#

# allow the libs to be in the bin dir
use FindBin;
use lib "$FindBin::RealBin/lib";
use lib "/home/hamish/s/bin/lib";

use WWW::Mechanize;
use HTML::TreeBuilder;

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

# TODO
# - turn this into a file processer, something else can do the downloads ..
my @urls = (
    'https://cplonline.com.au/hard-drives/desktop-hard-drives.html',
    'https://cplonline.com.au/hard-drives/laptop-hard-drives.html',
    'https://cplonline.com.au/hard-drives/ssd.html',
    'https://cplonline.com.au/hard-drives/enterprise-hard-drives.html'
);

sub url2tree {
    my $url = shift;

    my $mech = WWW::Mechanize->new(autocheck=>0);
    $mech->get($url);
    return undef if (!$mech->success());

    my $tree = HTML::TreeBuilder->new;
    $tree->parse($mech->content());
    $tree->eof;
    $tree->elementify;

    return $tree;
}

sub normalise1product {
    my $data = shift;

    # Normalise the price field
    $data->{price} =~ s/^\$//;
    $data->{price} =~ s/,//;

    my $t = $data->{comment};

    if ($t =~ m/ (\d+)rpm/i) {
        $data->{rpm} = $1;
    } elsif ($t =~ m/ ([0-9][0-9.]+)k/i) {
        $data->{rpm} = $1 * 1000;
    }

    if ($t =~ m/ 3.5\" /) {
        $data->{form} = '3.5"';
    } elsif ($t =~ m/ 3.5in /i) {
        $data->{form} = '3.5"';
    } elsif ($t =~ m/ 2.5\" /) {
        $data->{form} = '2.5"';
    } elsif ($t =~ m/ 2.5in /i) {
        $data->{form} = '2.5"';
    }

    if ($t =~ m/ (\d+)tb /i) {
        $data->{gig} = $1 * 1000;
    }

    if ($t =~ m/seagate /i) {
        $data->{brand} = 'Seagate';
    } elsif ($t =~ m/toshiba /i) {
        $data->{brand} = 'Toshiba';
    } elsif ($t =~ m/wd /i) {
        $data->{brand} = 'WD';
    }

    # TODO - ensure price starts with a dollarsign
    $data->{date} = 'FIXME';
    $data->{interface} = 'FIXME';
    $data->{supplier} = 'CPL';

    if ($data->{price} && $data->{gig}) {
        $data->{sgig} = $data->{price} / $data->{gig};
    } else {
        $data->{sgig} = '?';
    }

    if (!defined($data->{rpm})) {
        $data->{rpm} = "?";
    }

    if (!defined($data->{form})) {
        $data->{form} = "?";
    }

    if (!defined($data->{gig})) {
        $data->{gig} = "?";
    }

    if (!defined($data->{brand})) {
        $data->{brand} = "?";
    }

    # commas annoy my dodgy not-quite-csv
    $data->{comment} =~ s/,/_/g;

    return $data;
}

sub normaliseproducts {
    my @products;
    while (my $prod = shift) {
        push @products, normalise1product($prod);
    }
    return @products;
}

sub scrape1product {
    my $node = shift;
    my $data = {};

    my $url = $node->look_down('_tag', 'a');
    if (!$url) {
        warn("Could not find product image and url");
        return undef;
    }

    $data->{comment} = $url->attr('title');
    $data->{url} = $url->attr('href');
    
    my $price = $node->look_down('_tag', 'span', 'class', 'price');
    if (!$price) {
        warn("Could not find price");
        return undef;
    }

    $data->{price} = $price->as_trimmed_text();

    return $data;
}

sub scrape2products {
    my $tree = shift;

    my $products = $tree->look_down(
        '_tag', 'div',
        'class', 'category-products',
    );
    if (!$products) {
        warn("Could not find products");
        return undef;
    }

    my @products;
    for my $node ($products->look_down(
            '_tag', 'li',
            'class', qr/item/,
        )) {
        push @products, scrape1product($node);
    }

    return @products;
}

my @products;
for my $url (@urls) {
    my $tree = url2tree($url);
    push @products, scrape2products($tree);
}

@products = normaliseproducts(@products);

my @fields = qw(date price form interface rpm gig sgig brand supplier comment);

print(join(',', @fields), "\n");

for my $prod (@products) {
    print(join(',', map({$prod->{$_}} @fields)), "\n");
}

#print Dumper(@products);

